<#
.SYNOPSIS
    Upload archival data to Azure Blob Storage with indexing and tagging.

.DESCRIPTION
    Prompts for customer selection, indexes files, uploads to Azure Blob Storage,
    applies tags, and optionally writes logs to C:\Archives.

.AUTHOR
    Generated by ChatGPT for Bit by Bit


## TODO - Add in code that indexes after the fact from az side to a csv that can be attached to the itg.  have it generate a txt doc with itg info along with the file
Remove the option to migrate to archive tier; replace with Two copy options - Copy to Archive Tier, Copy to Hot Tier


#>

#
# --- Track Start Time ---
$startTime = Get-Date

# --- Customer selection ---
 $choices = @(
    @{ Code = "LL"; Name = "London Luxury"; Ticket = "989858"; Paths = @("H:\") },
    @{ Code = "FE"; Name = "First Environment"; Ticket = "989857"; Paths = @("F:\", "G:\") },
    @{ Code = "BBB"; Name = "Bit By Bit (Test)"; Ticket = "123456"; Paths = @((Get-Location).Path) }
)

Write-Host "`nSelect a customer to archive:" -ForegroundColor Cyan
for ($i = 0; $i -lt $choices.Count; $i++) {
    $pathsString = $choices[$i].Paths -join ", "
    Write-Host "[$($i+1)] $($choices[$i].Name) (Ticket: $($choices[$i].Ticket), Paths: $pathsString)"
}
Write-Host "[4] Other (manual entry)"
$selection = Read-Host "Enter 1, 2, 3, or 4"

if ($selection -notin @("1","2","3","4")) {
    Write-Host "Invalid selection. Please enter 1, 2, 3, or 4." -ForegroundColor Red
    exit
}

if ($selection -eq "4") {
    $companyName = Read-Host "Enter customer name"
    $companyCode = Read-Host "Enter customer code (short, e.g. XYZ)"
    $ticketNumber = Read-Host "Enter ticket number"
    $customPath = Read-Host "Enter full path to archive (e.g. C:\Data or /Users/you/Documents)"
    $customer = @{ Code = $companyCode; Name = $companyName; Ticket = $ticketNumber; Paths = @($customPath) }
} else {
    $customer = $choices[$selection - 1]
    $companyCode = $customer.Code
    $ticketNumber = $customer.Ticket
    $companyName = $customer.Name
}

Write-Host "`nSelected: ${companyName} (${companyCode}), Ticket #${ticketNumber}" -ForegroundColor Green

Write-Host "`n=== Archive Script Setup Mode ===" -ForegroundColor Cyan
Write-Host "Choose script mode:"
Write-Host "[1] Setup Azure Storage only"
Write-Host "[2] Perform file indexing only"
Write-Host "[3] Perform AzCopy upload only (assumes storage already created)"
Write-Host "[4] Move all uploaded blobs to Archive tier"
$scriptMode = Read-Host "Enter 1, 2, 3, or 4"

if ($scriptMode -in @("2", "3", "4")) {
    # Path selection
    if ($customer.Paths.Count -gt 1) {
        Write-Host "`nAvailable source paths for ${companyName}:" -ForegroundColor Yellow
        for ($i = 0; $i -lt $customer.Paths.Count; $i++) {
            Write-Host "[$i] $($customer.Paths[$i])"
        }
        $selected = Read-Host "Enter the number of the path to use"
        $rootPath = $customer.Paths[$selected]
    } else {
        $rootPath = $customer.Paths[0]
    }
}

# Logging option
# By default, always enable logging except for scriptMode 2, which prompts the user.
$enableLogging = $true

# File paths
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"

if ($IsWindows) {
    $logRoot = "C:\Archives"
} else {
    $logRoot = "$HOME/Archives"
}

if ($enableLogging -and !(Test-Path $logRoot)) {
    New-Item -ItemType Directory -Path $logRoot | Out-Null
}
$logFile = "$logRoot\upload-${companyCode}-${timestamp}.log"
$storageAccount = "stor$($companyCode.ToLower())$($ticketNumber)"
$containerName = "archive"
$resourceGroup = "rg-${companyCode}-${ticketNumber}"

function Log {
    param ($msg, $color = "White")
    Write-Host $msg -ForegroundColor $color
    if ($enableLogging) {
        $msg | Out-File -FilePath $logFile -Append
    }
}

if ($scriptMode -eq "2") {
    if (-not (Test-Path $rootPath)) {
        Write-Host "ERROR: Path '${rootPath}' does not exist." -ForegroundColor Red
        exit
    }
    Write-Host "`nUsing path: ${rootPath}" -ForegroundColor Cyan

    # Prompt for logging inside scriptMode 2
    $enableLogging = Read-Host "Do you want to save output to a log file in C:\Archives? (Y/N)"
    $enableLogging = $enableLogging.Trim().ToUpper() -eq "Y"
    # --- Indexing ---
    Log "`n=== Indexing Files in ${rootPath} ===" "Cyan"
    $files = Get-ChildItem -Path $rootPath -Recurse -File -ErrorAction SilentlyContinue

    $indexTxt = "$logRoot\index-${companyCode}-${timestamp}.txt"
    $indexJson = "$logRoot\index-${companyCode}-${timestamp}.json"
    $indexXml = "$logRoot\index-${companyCode}-${timestamp}.xml"

    if ($enableLogging) {
        $files | Select-Object FullName, Length, LastWriteTime | Format-Table | Out-String | Set-Content $indexTxt
        $files | Select-Object FullName, Length, LastWriteTime | ConvertTo-Json -Depth 3 | Set-Content $indexJson
        $files | Select-Object FullName, Length, LastWriteTime | Export-Clixml -Path $indexXml
    }

    Log "Index files created:" "Green"
    Log " - $indexTxt"
    Log " - $indexJson"
    Log " - $indexXml"
}

if ($scriptMode -eq "1") {
    # --- Azure Resource Creation ---
    Log "`n=== Creating Azure Resources ===" "Cyan"
    $rgOutput = az group create --name $resourceGroup --location eastus
    $rgOutput | Out-File -Append:$enableLogging $logFile
    Write-Host $rgOutput -ForegroundColor Gray

    $saOutput = az storage account create --name $storageAccount --resource-group $resourceGroup --location eastus --sku Standard_LRS
    $saOutput | Out-File -Append:$enableLogging $logFile
    Write-Host $saOutput -ForegroundColor Gray

    $saKey = az storage account keys list --account-name $storageAccount --resource-group $resourceGroup --query "[0].value" -o tsv

    $containerOutput = az storage container create --name $containerName --account-name $storageAccount --account-key $saKey
    $containerOutput | Out-File -Append:$enableLogging $logFile
    Write-Host $containerOutput -ForegroundColor Gray

    # --- Tag Resources ---
    $tagOutput = az resource tag --tags "bbb-ticket=${ticketNumber}" `
        --resource-type "Microsoft.Storage/storageAccounts" `
        --name $storageAccount `
        --resource-group $resourceGroup
    $tagOutput | Out-File -Append:$enableLogging $logFile
    Write-Host $tagOutput -ForegroundColor Gray

    $groupUpdateOutput = az group update --name $resourceGroup --set tags.bbb-ticket=$ticketNumber
    $groupUpdateOutput | Out-File -Append:$enableLogging $logFile
    Write-Host $groupUpdateOutput -ForegroundColor Gray
}

if ($scriptMode -eq "3") {
    if (-not (Test-Path $rootPath)) {
        Write-Host "ERROR: Path '${rootPath}' does not exist." -ForegroundColor Red
        exit
    }
    Write-Host "`nUsing path: ${rootPath}" -ForegroundColor Cyan

    # --- Upload Files ---
    Log "`n=== Uploading to Azure with AzCopy ===" "Cyan"
    $saKey = az storage account keys list --account-name $storageAccount --resource-group $resourceGroup --query "[0].value" -o tsv
    $expiry = (Get-Date).ToUniversalTime().AddHours(24).ToString("yyyy-MM-ddTHH:mm:ssZ")
    $sasToken = az storage container generate-sas `
        --account-name $storageAccount `
        --name $containerName `
        --permissions acwl `
        --expiry $expiry `
        --account-key $saKey `
        -o tsv
    $azcopyUri = "https://${storageAccount}.blob.core.windows.net/${containerName}?$sasToken"
    azcopy copy "$rootPath" "$azcopyUri" --recursive=true --block-blob-tier=Archive --blob-type=BlockBlob
    Log "All uploaded blobs are assigned the Archive tier." "Green"

    # --- Tag Blobs ---
    # Blob tagging block intentionally removed as per update instructions
}

if ($scriptMode -eq "4") {
    if (-not (Test-Path $rootPath)) {
        Write-Host "ERROR: Path '${rootPath}' does not exist." -ForegroundColor Red
        exit
    }
    Write-Host "`nUsing path: ${rootPath}" -ForegroundColor Cyan

    # --- Move Blobs to Archive Tier ---
    Log "`n=== Moving Blobs to Archive Tier ===" "Cyan"
    $saKey = az storage account keys list --account-name $storageAccount --resource-group $resourceGroup --query "[0].value" -o tsv
    $blobs = az storage blob list --account-name $storageAccount --container-name $containerName --account-key $saKey --query "[].name" -o tsv

    if (-not $blobs) {
        Log "No blobs found in container '$containerName'." "Yellow"
        exit
    }

    Log "Blobs found:" "Green"
    $blobs | ForEach-Object { Log " - $_" "Green" }

    $confirm = Read-Host "Do you want to move all these blobs to Archive tier? (Y/N)"
    if ($confirm.Trim().ToUpper() -ne "Y") {
        Log "Operation cancelled by user." "Yellow"
        exit
    }

    foreach ($blob in $blobs) {
        Log "Moving blob '$blob' to Archive tier..." "Cyan"
        az storage blob set-tier `
            --account-name $storageAccount `
            --container-name $containerName `
            --name $blob `
            --tier Archive `
            --account-key $saKey | Out-File -Append:$enableLogging $logFile
        Log "Blob '$blob' moved to Archive tier." "Green"
    }
}

#
# --- Timing/Logging Section ---
$endTime = Get-Date
$elapsed = $endTime - $startTime
Log "`nStart Time : $startTime"
Log "End Time   : $endTime"
Log "Elapsed    : $($elapsed.ToString())"

Log "`n=== Upload Complete for ${companyName} (${ticketNumber}) ===" "Green"
if ($enableLogging) {
    Log "Log file: $logFile" "Green"
}